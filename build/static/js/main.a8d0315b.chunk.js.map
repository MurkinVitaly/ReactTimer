{"version":3,"sources":["image/time.jpg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","padTime","time","toString","padStart","App","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","_useState3","_useState4","timeLeft","setTimeLeft","_useState5","_useState6","isRunning","setIsRunning","intervalRef","useRef","console","log","current","minutes","Math","floor","seconds","react_default","a","createElement","className","onClick","setInterval","clearInterval","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App_App","document","getElementById"],"mappings":"+JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qJCKxC,SAASC,EAAQC,GACf,OAAOA,EAAKC,WAAWC,SAAS,EAAG,KAEtB,SAASC,IAAM,IAAAC,EACFC,mBAAS,8BADPC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrBK,EADqBH,EAAA,GACdI,EADcJ,EAAA,GAAAK,EAEIN,mBAAS,MAFbO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAErBE,EAFqBD,EAAA,GAEXE,EAFWF,EAAA,GAAAG,EAGMV,oBAAS,GAHfW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGrBE,EAHqBD,EAAA,GAGVE,EAHUF,EAAA,GAItBG,EAAcC,iBAAO,MAe3BC,QAAQC,IAAIH,EAAYI,SAkBxB,IAAMC,EAAUzB,EAAQ0B,KAAKC,MAAMb,EAAW,KACxCc,EAAU5B,EAAQc,EAAqB,GAAVW,GACnC,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAKrB,GAELmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,YAAON,GACPI,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,YAAOH,IAGTC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXd,GAAaW,EAAAC,EAAAC,cAAA,UAAQE,QA5C7B,WACEtB,EAAS,uBACmB,OAAxBS,EAAYI,UAChBL,GAAa,GACbC,EAAYI,QAAUU,YAAY,WAChCnB,EAAY,SAACD,GACX,OAAIA,GAAY,EAAUA,EAAW,EAG9B,KAER,QAiCgB,SACdI,GAAaW,EAAAC,EAAAC,cAAA,UAAQE,QA9B5B,WACEtB,EAAS,cACmB,OAAxBS,EAAYI,UAChBW,cAAcf,EAAYI,SAC1BJ,EAAYI,QAAU,KACtBL,GAAa,MAyBK,QACdU,EAAAC,EAAAC,cAAA,UAAQE,QAvBd,WACEtB,EAAS,8BACTwB,cAAcf,EAAYI,SAC1BJ,EAAYI,QAAU,KACtBT,EAAY,MACZI,GAAa,KAkBT,WC5DR,IAYeiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCxC,EAAAyC,EAAA,GAAAC,KAAA1C,EAAA2C,KAAA,WAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDdW,IAASC,OACPpB,EAAAC,EAAAC,cAACF,EAAAC,EAAMoB,WAAP,KACErB,EAAAC,EAAAC,cAACoB,EAAD,OAEFC,SAASC,eAAe,SAM1BjB","file":"static/js/main.a8d0315b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/time.b1fba15f.jpg\";","import { render } from \"@testing-library/react\";\nimport React, { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport imageName from \"./image/time.jpg\";\n\nfunction padTime(time) {\n  return time.toString().padStart(2, \"0\");\n}\nexport default function App() {\n  const [title, setTitle] = useState(\"Let the countdown begin!!!\");\n  const [timeLeft, setTimeLeft] = useState(25 * 60);\n  const [isRunning, setIsRunning] = useState(false);\n  const intervalRef = useRef(null);\n\n  function startTimer() {\n    setTitle(\"You are doing great\");\n    if (intervalRef.current !== null) return;\n    setIsRunning(true);\n    intervalRef.current = setInterval(() => {\n      setTimeLeft((timeLeft) => {\n        if (timeLeft >= 1) return timeLeft - 1;\n\n        // reset the timer\n        return 0;\n      });\n    }, 1000);\n  }\n  console.log(intervalRef.current);\n\n  function stopTimer() {\n    setTitle(\"Keep it up\");\n    if (intervalRef.current === null) return;\n    clearInterval(intervalRef.current);\n    intervalRef.current = null;\n    setIsRunning(false);\n  }\n\n  function resetTimer() {\n    setTitle(\"Ready to go another round?\");\n    clearInterval(intervalRef.current);\n    intervalRef.current = null;\n    setTimeLeft(25 * 60);\n    setIsRunning(false);\n  }\n\n  const minutes = padTime(Math.floor(timeLeft / 60));\n  const seconds = padTime(timeLeft - minutes * 60);\n  return (\n    <div className=\"app\">\n      <h2>{title}</h2>\n\n      <div className=\"timer\">\n        <span>{minutes}</span>\n        <span>:</span>\n        <span>{seconds}</span>\n      </div>\n\n      <div className=\"buttons\">\n        {!isRunning && <button onClick={startTimer}>Start</button>}\n        {isRunning && <button onClick={stopTimer}>Stop</button>}\n        <button onClick={resetTimer}>Reset</button>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}